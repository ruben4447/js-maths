// Function declaration
func hi() { println("Hello"); }
hi();

// Function expression (remember semicolon at end)
hi = func() { println("Hello"); };
hi();

// With arguments
func add(a, b) { a + b; }
println(add(5 + i, 3));

// With argument types
func add(a: real, b: real) { a + b; }
println(add(5 + i, 3));

// With return type
func tostring(arg: any): string { arg }
x = 12;
println("x = {type(x)} {x}");
x = tostring(x);
println("x = {type(x)} {x}");

// Optional arguments
func greet(name: ?string) {
  println("Hello, " + (name ?? "Unknown"));
}
greet();
greet("Joe");

// Pass by reference
func swap(x: ref any, y: ref any) {
  tmp = x;
  x = y;
  y = tmp;
}

a = 5, b = 10;
print("a:" + a + "; b:" + b);
swap(a, b);
println(" --> a:" + a + "; b:" + b);

// Default value
func greet(name = "Default") {
  println("Hello, " + name);
}
greet();
greet("Joe");

// Default value with type
func greet(name: string = "Default") {
  println("Hello, " + name);
}
greet();
greet(12 + i);

// Lambda function
f = x -> x * 2, pow = (a, b = 2) -> a ** b;
println(f(10));
println(pow(3));
println(pow(3, 4));

adder = a -> b -> a + b;
add5 = adder(5);
println(add5(7));
println(add5(-1));

// '...' arguments: compact to array
func print_array(...items) {
  println("[{len(items)}] \{{join(items, ',')}}");
}
print_array(65, 66, 67, 68, 69);

// ... with a type
func print_array(...items: char) {
  println("[{len(items)}] \{{join(items, ',')}}");
}
print_array(65, 66, 67, 68, 69);

// Using '...' to expand arguments
powargs = [4, 2];
println("{powargs=} : {pow(...powargs) = }");